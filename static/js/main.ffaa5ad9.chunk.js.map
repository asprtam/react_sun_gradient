{"version":3,"sources":["Translate.js","obstacles/Obstacles.js","sun/rays.js","sun/sun.js","message/message.js","App.js","serviceWorker.js","index.js"],"names":["Transform","element","yoff","value","window","innerHeight","document","querySelector","style","transform","Obstacles","addEventListener","pageYOffset","translateYrotateY","className","Component","Rays","createRays","count","rayWidth","raysTable","i","push","width","this","props","Sun","opacity","rayCount","Message","title","bottomText","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAMeA,G,MANG,SAAEC,EAASC,EAAMC,GAC5BD,EAAwB,EAAnBE,OAAOC,cACXC,SAASC,cAAcN,GAASO,MAAMC,UAAtC,mBAA8DP,EAAKC,EAAnE,6BAA6FD,EAAKC,EAAM,IAAxG,eAAkHD,EAAKC,EAAvH,aCmBOO,E,4LAfPJ,SAASK,iBAAiB,UAAU,WAChC,IAAMT,EAAOE,OAAOQ,YACpBC,EAAkB,iBAAkBX,EAAM,KAC1CW,EAAkB,kBAAmBX,EAAM,W,+BAI/C,OACI,6BACI,yBAAKY,UAAU,iBAAgB,+BAC/B,yBAAKA,UAAU,kBAAiB,oC,GAZxBC,aCiBTC,G,uNAlBXC,WAAa,SAACC,GAGV,IAFA,IACIC,EADEC,EAAY,GAETC,EAAI,EAAGA,EAAIH,EAAOG,IACvBF,EAAqB,GAARE,EAAE,EAAG,GAClBD,EAAUE,KAAK,yBAAKd,MAAO,CAACe,MAAM,GAAD,OAAKJ,EAAL,MAAmBV,UAAU,iCAAD,OAAoCY,GAAI,IAAIH,GAA5C,0BAAoE,GAAGC,EAAS,EAAhF,WAA4FL,UAAU,SAEvK,OAAOM,G,wEAGP,OACI,yBAAKN,UAAU,QACVU,KAAKP,WAAWO,KAAKC,MAAMP,Y,GAbzBH,cCsBJW,E,4LAjBPpB,SAASK,iBAAiB,UAAU,WAChC,IAAMT,EAAOE,OAAOQ,YACjBV,EAAwB,IAAnBE,OAAOC,cACXC,SAASC,cAAT,QAA+BC,MAAMC,UAArC,0BAAoEL,OAAOC,YAAkB,IAALH,EAAxF,OACAI,SAASC,cAAT,SAAgCC,MAAMmB,QAAtC,WAAoDzB,EAAyB,IAAnBE,OAAOC,aAAkBD,OAAOC,mB,+BAKlG,OACI,yBAAKS,UAAU,OACP,kBAAC,EAAD,CAAMI,MAAOM,KAAKC,MAAMG,gB,GAb1Bb,aCqBHc,G,kMArBPvB,SAASK,iBAAiB,UAAU,WAChC,IAAMT,EAAOE,OAAOQ,YACjBV,EAAwB,IAAnBE,OAAOC,YACXC,SAASC,cAAT,YAAmCC,MAAMmB,QAAzC,UAAgF,MAAzBzB,EAAKE,OAAOC,cAEnEC,SAASC,cAAT,YAAmCC,MAAMmB,QAAzC,S,+BAKR,OACI,yBAAKb,UAAU,WACX,6BACI,4BAAKU,KAAKC,MAAMK,OAChB,4BAAKN,KAAKC,MAAMM,kB,GAhBdhB,cCcPiB,EAXH,WACV,OACE,6BACE,yBAAKlB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKc,SAAS,OACd,kBAAC,EAAD,CAASE,MAAM,cAAcC,WAAW,kBCA1BE,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ffaa5ad9.chunk.js","sourcesContent":["const Transform = ( element, yoff, value ) => {\n    if(yoff<window.innerHeight*2) {\n        document.querySelector(element).style.transform = `rotateX(-${yoff*value}deg) translate3d(-${yoff*value*2.5}px, ${yoff*value}px, 0)`;\n    }\n}\n\nexport default Transform;","import React, { Component } from 'react';\nimport './obstacles.css';\nimport translateYrotateY from '../Translate';\n\nclass Obstacles extends Component {\n    componentDidMount () {\n        document.addEventListener('scroll', () => {\n            const yoff = window.pageYOffset;\n            translateYrotateY('.left-obstacle', yoff, 0.02);\n            translateYrotateY('.right-obstacle', yoff, 0.025);\n        });\n    }\n    render () {\n        return (\n            <div>\n                <div className=\"left-obstacle\"><div></div></div>\n                <div className=\"right-obstacle\"><div></div></div>\n            </div>\n        );\n    }\n}\nexport default Obstacles;","import React, { Component } from 'react';\n\nclass Rays extends Component {\n    createRays = (count) => {\n        const raysTable = [];\n        let rayWidth;\n        for (let i = 0; i < count; i++) {\n            rayWidth = ((i%2)+1)*3;\n            raysTable.push(<div style={{width: `${rayWidth}vw`, transform: `translate(-50%, -50%) rotateZ(${(i)*(360/count)}deg) translate(${12+rayWidth/2}vw, 0)`}} className=\"ray\"></div>)\n        }\n        return raysTable;\n    }\n    render () {\n        return (\n            <div className=\"rays\">\n                {this.createRays(this.props.count)}\n            </div>\n        ); \n    }\n}\n\nexport default Rays;","import React, { Component } from 'react';\nimport './sun.css';\nimport Rays from './rays'\n\n\nclass Sun extends Component {\n    componentDidMount () {\n        document.addEventListener('scroll', () => {\n            const yoff = window.pageYOffset;\n            if(yoff<window.innerHeight*2.5) {\n                document.querySelector(`.sun`).style.transform = `translate(-50%, ${window.innerHeight-(yoff*0.38)}px)`;\n                document.querySelector(`.rays`).style.opacity = `${(yoff-(window.innerHeight*1.3))/window.innerHeight}`;\n            }\n        });\n    }\n    render () {\n        return (\n            <div className=\"sun\">\n                    <Rays count={this.props.rayCount}/>\n            </div>\n        );\n    }\n}\n\nexport default Sun;","import React, { Component } from 'react';\nimport './message.css';\n\nclass Message extends Component {\n    componentDidMount () {\n        document.addEventListener('scroll', () => {\n            const yoff = window.pageYOffset;\n            if(yoff>window.innerHeight*3.3) {\n                document.querySelector(`.message`).style.opacity = `${(yoff-window.innerHeight)*0.0003}`;\n            } else {\n                document.querySelector(`.message`).style.opacity = `0`;\n            }\n        });\n    }\n    render () {\n        return (\n            <div className=\"message\">\n                <div>\n                    <h1>{this.props.title}</h1>\n                    <h2>{this.props.bottomText}</h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Message;","import React from 'react';\nimport Obstacles from './obstacles/Obstacles';\nimport './App.css';\nimport Sun from './sun/sun';\nimport Message from './message/message';\n\nconst App = () => {\n  return (\n    <div>\n      <div className=\"bg\"></div>\n      <Obstacles/> \n      <Sun rayCount=\"36\"/>\n      <Message title=\"Lorem Ipsum\" bottomText=\"Bottom Text\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}